// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cmc.web;

import com.cmc.datatables.DatatablesData;
import com.cmc.datatables.DatatablesPageable;
import com.cmc.domain.Users;
import com.cmc.repo.GlobalSearch;
import com.cmc.web.UsersController;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

privileged aspect UsersController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.list(Model model) {
        return "userss/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Users> UsersController.list(GlobalSearch search, Pageable pageable) {
        Page<Users> users = usersService.findAll(search, pageable);
        return users;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Users> UsersController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Users> users = list(search, pageable);
        long allAvailableUsers = usersService.count();
        return new DatatablesData<Users>(users, allAvailableUsers, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.createForm(Model model) {
        model.addAttribute(new Users());
        populateForm(model);
        return "userss/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.create(@Valid @ModelAttribute Users users, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "userss/create";
        }
        Users newUsers = usersService.save(users);
        redirectAttrs.addAttribute("id", newUsers.getId());
        return "redirect:/userss/{id}";
    }
    
    @RequestMapping(value = "/{users}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.editForm(@PathVariable("users") Users users, Model model) {
        populateForm(model);
        return "userss/edit";
    }
    
    @RequestMapping(value = "/{users}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.update(@Valid @ModelAttribute Users users, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "userss/edit";
        }
        Users savedUsers = usersService.save(users);
        redirectAttrs.addAttribute("id", savedUsers.getId());
        return "redirect:/userss/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.delete(@PathVariable("id") Long id, Model model) {
        usersService.delete(id);
        return "redirect:/userss";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity UsersController.delete(@PathVariable("id") Long id) {
        usersService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{users}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String UsersController.show(@PathVariable("users") Users users, Model model) {
        return "userss/show";
    }
    
    public void UsersController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void UsersController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
}
