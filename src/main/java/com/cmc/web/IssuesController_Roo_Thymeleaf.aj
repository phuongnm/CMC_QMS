// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cmc.web;

import com.cmc.datatables.DatatablesData;
import com.cmc.datatables.DatatablesPageable;
import com.cmc.domain.Issues;
import com.cmc.repo.GlobalSearch;
import com.cmc.web.IssuesController;
import javax.validation.Valid;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

privileged aspect IssuesController_Roo_Thymeleaf {
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.list(Model model) {
        return "issueses/list";
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Page<Issues> IssuesController.list(GlobalSearch search, Pageable pageable) {
        Page<Issues> issues = issuesService.findAll(search, pageable);
        return issues;
    }
    
    @RequestMapping(method = RequestMethod.GET, produces = "application/vnd.datatables+json")
    @ResponseBody
    public DatatablesData<Issues> IssuesController.list(GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        Page<Issues> issues = list(search, pageable);
        long allAvailableIssues = issuesService.count();
        return new DatatablesData<Issues>(issues, allAvailableIssues, draw);
    }
    
    @RequestMapping(value = "/create-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.createForm(Model model) {
        model.addAttribute(new Issues());
        populateForm(model);
        return "issueses/create";
    }
    
    @RequestMapping(method = RequestMethod.POST, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.create(@Valid @ModelAttribute Issues issues, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "issueses/create";
        }
        Issues newIssues = issuesService.save(issues);
        redirectAttrs.addAttribute("id", newIssues.getId());
        return "redirect:/issueses/{id}";
    }
    
    @RequestMapping(value = "/{issues}/edit-form", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.editForm(@PathVariable("issues") Issues issues, Model model) {
        populateForm(model);
        return "issueses/edit";
    }
    
    @RequestMapping(value = "/{issues}", method = RequestMethod.PUT, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.update(@Valid @ModelAttribute Issues issues, BindingResult result, RedirectAttributes redirectAttrs, Model model) {
        if (result.hasErrors()) {
            populateForm(model);
            return "issueses/edit";
        }
        Issues savedIssues = issuesService.save(issues);
        redirectAttrs.addAttribute("id", savedIssues.getId());
        return "redirect:/issueses/{id}";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.delete(@PathVariable("id") Long id, Model model) {
        issuesService.delete(id);
        return "redirect:/issueses";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public ResponseEntity IssuesController.delete(@PathVariable("id") Long id) {
        issuesService.delete(id);
        return new ResponseEntity(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{issues}", method = RequestMethod.GET, produces = MediaType.TEXT_HTML_VALUE)
    public String IssuesController.show(@PathVariable("issues") Issues issues, Model model) {
        return "issueses/show";
    }
    
    public void IssuesController.populateForm(Model model) {
        populateFomats(model);
    }
    
    public void IssuesController.populateFomats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("createdOn_date_format", "yyyy-MM-dd hh:mm:ss");
        model.addAttribute("startDate_date_format", "yyyy-MM-dd hh:mm:ss");
    }
    
}
