// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.cmc.impl;

import com.cmc.domain.Projects;
import com.cmc.impl.ProjectsServiceImpl;
import com.cmc.repo.GlobalSearch;
import com.cmc.repo.ProjectsRepository;
import com.cmc.svr.ProjectsService;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProjectsServiceImpl_Roo_Service_Impl {
    
    declare parents: ProjectsServiceImpl implements ProjectsService;
    
    declare @type: ProjectsServiceImpl: @Service;
    
    declare @type: ProjectsServiceImpl: @Transactional(readOnly = true);
    
    public ProjectsRepository ProjectsServiceImpl.projectsRepository;
    
    @Autowired
    public ProjectsServiceImpl.new(ProjectsRepository projectsRepository) {
        this.projectsRepository = projectsRepository;
    }

    @Transactional(readOnly = false)
    public Projects ProjectsServiceImpl.save(Projects entity) {
        return projectsRepository.save(entity);
    }
    
    @Transactional(readOnly = false)
    public void ProjectsServiceImpl.delete(Long id) {
         projectsRepository.delete(id);
    }
    
    @Transactional(readOnly = false)
    public List<Projects> ProjectsServiceImpl.save(Iterable<Projects> entities) {
        return projectsRepository.save(entities);
    }
    
    @Transactional(readOnly = false)
    public void ProjectsServiceImpl.delete(Iterable<Long> ids) {
        List<Projects> toDelete = projectsRepository.findAll(ids);
        projectsRepository.deleteInBatch(toDelete);
    }
    
    public List<Projects> ProjectsServiceImpl.findAll() {
        return projectsRepository.findAll();
    }
    
    public List<Projects> ProjectsServiceImpl.findAll(Iterable<Long> ids) {
        return projectsRepository.findAll(ids);
    }
    
    public Projects ProjectsServiceImpl.findOne(Long id) {
        return projectsRepository.findOne(id);
    }
    
    public long ProjectsServiceImpl.count() {
        return projectsRepository.count();
    }
    
    public Page<Projects> ProjectsServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return projectsRepository.findAll(globalSearch, pageable);
    }
    
}
